%%%===================================================================
%% @author Erdem Aksu
%% @copyright 2017 Pundun Labs AB
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%% http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
%% implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%% -------------------------------------------------------------------
%% @doc
%% Module Description:
%% @end
%%%===================================================================


-module(wikix_json).

-export([profile/1,
	 varint_test/1]).

%% API functions
-export([import/2,
	 import/3,
	 test/0,
	 test_rpc/0,
	 test/3,
	 index_read/2,
	 decode_encode/0]).

%% Spawned functions
-export([server/5,
	 client/3]).

-include_lib("gb_log/include/gb_log.hrl").

-define(CHUNK, 1).
-define(SPAWNS, 8).

%%%===================================================================
%%% API functions
%%%===================================================================
varint_test(0) ->
    ok;
varint_test(N) ->
    true = (apollo_epb:e_varint(N,<<>>) == apollo_pb:e_varint(N,<<>>)),
    varint_test(N-1).

profile(0) ->
    ok;
profile(N) ->
    true = decode_encode(),
    profile(N-1).

index_read(Term, Limit) ->
    Connection = {"127.0.0.1", 8887, "admin", "admin"},
    {ok, Session} = connect(Connection),
    Res = rpc(Session, index_read, ["enwikiquote", "text", Term, Limit]),
    ok = disconnect(Session),
    Res.

test() ->
    Connection = {"127.0.0.1", 8887, "admin", "admin"},
    test(Connection, "enwikiquote", ?SPAWNS).

test_rpc() ->
    test('pundun97ae64@sitting', "enwikiquote", ?SPAWNS).

test(Connection, Tab, N) ->
    import(Connection, "/nvme/data/"++Tab, N).

import(Dir, N) ->
    Connection = {"127.0.0.1", 8887, "admin", "admin"},
    import(Connection, Dir, N).

-spec import(Connection :: term(),
	     Dir :: string(),
	     N :: integer() | undefined) ->
    ok.
import(Connection, Dir, N) ->
    io:format("~p:~p(~p, ~p, ~p).~n", [?MODULE, ?FUNCTION_NAME,
				     Connection, Dir, N]),
    %io:format("[~p:~p] Filenames: ~p~n", [?MODULE, ?LINE, Filenames]),
    {ok, Filenames} = file:list_dir(Dir),
    Tab = filename:basename(Dir),
    {ok, Session} = connect(Connection),
    rpc(Session, delete_table, [Tab]),
    TableOptions = [{type, rocksdb},
		    {ttl, 300},
		    {num_of_shards, 12},
		    {distributed, true},
		    {hashing_method, uniform},
		    {data_model, array},
		    {comparator, ascending}],
    ok = rpc(Session, create_table, [Tab, ["title"], TableOptions]),
    IndexOptions =
	#{char_filter => nfc,
	  token_filter =>
	    #{add => [],
	      delete => [english_stopwords, wikipages_stopwords],
	      transform => lowercase,
	      stats => freqs},
	  tokenizer => unicode_word_boundaries},
    %IndexOn = [ "auxiliary_text","category","content_model","coordinates",
    %		"defaultsort","external_link","heading","incoming_links",
    %		"language","namespace","namespace_text","opening_text",
    %		"outgoing_link","popularity_score","redirect","source_text",
    %		"template","text","text_bytes","timestamp","version",
    %		"version_type","wiki","wikibase_item"],
    IndexOn = [{C, IndexOptions} || C <- ["text", "opening_text", "category"]],
    ok = rpc(Session, add_index, [Tab, IndexOn]),
    ok = disconnect(Session),
    SPid = spawn(?MODULE, server, [Dir, Filenames, N, 0, 0]),
    _MonitorRef = erlang:monitor(process, SPid),
    register(my_server, SPid),
    [spawn(?MODULE, client, [SPid, Connection, Tab] ) || _ <- lists:seq(1,N)],
    {ok, SPid}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
connect(Node) when is_atom(Node) ->
    {ok, Node};
connect(Pid) when is_pid(Pid) ->
    {ok, Pid};
connect({Host, Port, User, Pass}) ->
    pbpc:connect(Host, Port, User, Pass).

disconnect(Node) when is_atom(Node)->
    ok;
disconnect(Session) when is_pid(Session) ->
    pbpc:disconnect(Session).

server(_Dir, _Filenames, 0, Success, Fail) ->
    io:format("[~p:~p] Success: ~p Fail: ~p~nServer stopping..~n",[?MODULE,?LINE, Success, Fail]);
server(Dir, Filenames, N, S, F) ->
    receive
	stop ->
	    server(Dir, [], N, S, F);
	{write_result, ok} ->
	    server(Dir, Filenames, N, S+?CHUNK, F);
	{write_result, {error, _}} ->
	    server(Dir, Filenames, N, S, F+?CHUNK);
	{client, Pid, register} ->
	    erlang:monitor(process, Pid),
	    server(Dir, Filenames, N, S, F);
	{client, Pid, file} ->
	    case Filenames of
		[H | T] ->
		    Pid ! {server, file, filename:join(Dir, H)},
		    server(Dir, T, N, S, F);
		[] ->
		    Pid ! {server, stop},
		    server(Dir, [], N, S, F)
	    end;
	{'DOWN', _MonitorRef, process, _Object, _Info} ->
	    server(Dir, Filenames, N-1, S, F)
    end.

client(SPid, Connection, Tab) ->
    SPid ! {client, self(), register},
    {ok, Session} = connect(Connection),
    client_loop(SPid, Session, Tab).

client_loop(SPid, Session, Tab) ->
    Start = os:timestamp(),
    SPid ! {client, self(), file},
    receive
	{server, file, File} ->
	    ok = load_file(SPid, Session, Tab, File),
	    Stop = os:timestamp(),
	    Time = timer:now_diff(Stop, Start)/1000/1000,
	    io:format("~p took ~.2f seconds to load.~n", [File, Time]),
	    client_loop(SPid, Session, Tab);
	{server, stop} ->
	    ok = disconnect(Session)
    end.

load_file(SPid, Session, Tab, Filename) ->
    case file:read_file(Filename)  of
	{error, Reason} ->
	    io:format("[~p:~p] read file error ~p~n",[?MODULE, ?LINE, Reason]),
	    {error, {Filename, file:format_error(Reason)}};
	{ok, Binary} ->
	    decode_loop(SPid, Session, Tab, Binary, [], 0)
    end.

decode_loop(SPid, Session, Tab, Binary, Auc, ?CHUNK) ->
    write_terms(SPid, Session, Auc),
    decode_loop(SPid, Session, Tab, Binary, [], 0);

decode_loop(SPid, Session, Tab, Binary, Auc, It) ->
    case jiffy:decode(Binary, [{null_term, undefined},
			       return_trailer]) of
	{has_trailer, Term, RestData} ->
	    case add_term(Auc, Tab, Term) of
		Auc ->
		    decode_loop(SPid, Session, Tab, RestData, Auc, It);
		NewAuc ->
		    decode_loop(SPid, Session, Tab, RestData, NewAuc, It+1)
	    end;
	Term ->
	    NewAuc = add_term(Auc, Tab, Term),
	    write_terms(SPid, Session, NewAuc),
	    ok
    end.

add_term(Auc, Tab, Term) ->
    case my_fold(Term) of
	{Key, Value} ->
	    [[Tab, Key, Value] | Auc];
	skip ->
	    Auc
    end.

write_terms(SPid, Session, Terms) ->
    Res = [ rpc(Session, write, Args) || Args <- Terms],
    SPid ! {write_result, get_res(lists:usort(Res))}.

get_res([ok]) ->
    ok;
get_res(_) ->
    {error, failed}.

my_fold({List}) ->
    my_fold(List, undefined, []).
my_fold([{<<"title">>, TitleBin} | Rest], _K, V) ->
    my_fold(Rest, [{"title", binary_to_list(TitleBin)}],
		  [{"title", format_value(TitleBin)} | V]);
my_fold([{FBin, <<>>} | Rest], K, V) ->
    my_fold(Rest, K, [{binary_to_list(FBin), ""} | V]);
my_fold([{FBin, FVal} | Rest], K, V) ->
    my_fold(Rest, K, [{binary_to_list(FBin), format_value(FVal)} | V]);
my_fold([], undefined, _V) ->
    skip;
my_fold([], K, V) ->
    {K, V}.

format_value(Value) when is_binary(Value) ->
    lists:filter(fun(E) -> ((E<128) or (E>159)) end, binary_to_list(Value));
format_value(Value) when is_integer(Value) ->
    integer_to_list(Value);
format_value(Value) when is_float(Value) ->
    float_to_list(Value);
format_value(Value) when is_atom(Value) ->
    atom_to_list(Value);
format_value(undefined) ->
    "";
format_value({Value}) ->
    format_value(Value);
format_value({E1, E2}) ->
    lists:concat(["{", format_value(E1), ": ", format_value(E2), "}"]);
format_value(List) when is_list(List)  ->
    format_list(List, []).

format_list([Elem | Rest], Acc) ->
    format_list(Rest, [format_value(Elem) | Acc]);
format_list([], Acc) ->
    lists:reverse(Acc).

rpc(Node, Fun, Args) when is_atom(Node)->
    rpc:call(Node, enterdb, Fun, Args);
rpc(Session, Fun, Args) ->
    apply(pbpc, Fun, [Session | Args]).

decode_encode()->
    Bin = <<10,2,8,1,16,208,15,90,139,39,10,11,101,110,119,105,107,105,113,117,111,116,101,18,27,10,5,116,105,116,108,101,58,18,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,26,25,10,13,99,111,110,116,101,110,116,95,109,111,100,101,108,58,8,119,105,107,105,116,101,120,116,26,34,10,11,100,101,102,97,117,108,116,115,111,114,116,58,19,75,105,114,107,44,32,69,100,119,97,114,100,32,78,111,114,114,105,115,26,19,10,4,119,105,107,105,58,11,101,110,119,105,107,105,113,117,111,116,101,26,18,10,7,118,101,114,115,105,111,110,58,7,50,50,51,49,55,50,50,26,24,10,12,118,101,114,115,105,111,110,95,116,121,112,101,58,8,101,120,116,101,114,110,97,108,26,46,10,16,112,111,112,117,108,97,114,105,116,121,95,115,99,111,114,101,58,26,52,46,50,52,54,56,48,57,49,48,50,48,55,48,49,48,48,51,54,55,55,50,101,45,48,54,26,25,10,13,119,105,107,105,98,97,115,101,95,105,116,101,109,58,8,81,53,51,52,52,54,51,56,26,14,10,8,108,97,110,103,117,97,103,101,58,2,101,110,26,173,4,10,12,111,112,101,110,105,110,103,95,116,101,120,116,58,156,4,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,32,40,65,117,103,117,115,116,32,49,52,44,32,49,56,48,50,32,195,162,32,77,97,114,99,104,32,50,55,44,32,49,56,55,52,41,32,119,97,115,32,97,32,67,104,114,105,115,116,105,97,110,32,109,105,115,115,105,111,110,97,114,121,44,32,112,97,115,116,111,114,44,32,116,101,97,99,104,101,114,44,32,101,118,97,110,103,101,108,105,115,116,32,97,110,100,32,119,114,105,116,101,114,32,105,110,32,116,104,101,32,80,114,101,115,98,121,116,101,114,105,97,110,44,32,67,111,110,103,114,101,103,97,116,105,111,110,97,108,32,97,110,100,32,114,101,118,105,118,97,108,105,115,116,32,116,114,97,100,105,116,105,111,110,115,32,105,110,32,116,104,101,32,85,83,65,46,32,72,101,32,102,111,117,110,100,101,100,32,116,104,101,32,70,111,117,114,116,104,32,80,114,101,115,98,121,116,101,114,105,97,110,32,67,104,117,114,99,104,44,32,65,108,98,97,110,121,44,32,78,101,119,32,89,111,114,107,44,32,102,111,108,108,111,119,105,110,103,32,97,32,115,99,104,105,115,109,32,97,116,32,116,104,101,32,83,101,99,111,110,100,32,80,114,101,115,98,121,116,101,114,105,97,110,32,67,104,117,114,99,104,32,105,110,32,116,104,101,32,115,97,109,101,32,99,105,116,121,44,32,97,110,100,32,108,97,116,101,114,32,115,101,114,118,101,100,32,97,115,32,116,104,101,32,102,105,114,115,116,32,112,97,115,116,111,114,32,111,102,32,77,111,117,110,116,32,86,101,114,110,111,110,32,67,111,110,103,114,101,103,97,116,105,111,110,97,108,32,67,104,117,114,99,104,32,40,110,111,119,32,116,104,101,32,79,108,100,32,83,111,117,116,104,32,67,104,117,114,99,104,41,32,105,110,32,66,111,115,116,111,110,44,32,102,114,111,109,32,49,56,52,50,32,116,111,32,49,56,55,49,44,32,119,104,101,114,101,32,104,105,115,32,116,101,97,99,104,105,110,103,32,108,101,100,32,116,111,32,116,104,101,32,99,111,110,118,101,114,115,105,111,110,32,111,102,32,114,101,110,111,119,110,101,100,32,101,118,97,110,103,101,108,105,115,116,32,68,119,105,103,104,116,32,76,46,32,77,111,111,100,121,46,26,235,14,10,11,115,111,117,114,99,101,95,116,101,120,116,58,219,14,91,91,70,105,108,101,58,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,46,106,112,103,124,116,104,117,109,98,124,114,105,103,104,116,124,89,111,117,114,32,103,114,101,97,116,32,101,109,112,108,111,121,109,101,110,116,32,105,115,32,116,111,32,98,114,105,110,103,32,116,104,101,32,105,110,100,105,118,105,100,117,97,108,32,115,111,117,108,115,32,111,102,32,109,101,110,32,116,111,32,67,104,114,105,115,116,46,93,93,10,39,39,39,91,91,119,58,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,124,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,93,93,39,39,39,32,40,65,117,103,117,115,116,32,49,52,44,32,49,56,48,50,32,195,162,32,77,97,114,99,104,32,50,55,44,32,49,56,55,52,41,32,119,97,115,32,97,32,67,104,114,105,115,116,105,97,110,32,32,109,105,115,115,105,111,110,97,114,121,44,32,112,97,115,116,111,114,44,32,116,101,97,99,104,101,114,44,32,101,118,97,110,103,101,108,105,115,116,32,97,110,100,32,119,114,105,116,101,114,32,105,110,32,116,104,101,32,80,114,101,115,98,121,116,101,114,105,97,110,44,32,67,111,110,103,114,101,103,97,116,105,111,110,97,108,32,32,97,110,100,32,114,101,118,105,118,97,108,105,115,116,32,116,114,97,100,105,116,105,111,110,115,32,105,110,32,116,104,101,32,85,83,65,46,32,72,101,32,102,111,117,110,100,101,100,32,116,104,101,32,70,111,117,114,116,104,32,80,114,101,115,98,121,116,101,114,105,97,110,32,67,104,117,114,99,104,44,32,65,108,98,97,110,121,44,32,78,101,119,32,89,111,114,107,44,32,102,111,108,108,111,119,105,110,103,32,97,32,115,99,104,105,115,109,32,97,116,32,116,104,101,32,83,101,99,111,110,100,32,80,114,101,115,98,121,116,101,114,105,97,110,32,67,104,117,114,99,104,32,105,110,32,116,104,101,32,115,97,109,101,32,99,105,116,121,44,32,97,110,100,32,108,97,116,101,114,32,115,101,114,118,101,100,32,97,115,32,116,104,101,32,102,105,114,115,116,32,112,97,115,116,111,114,32,111,102,32,77,111,117,110,116,32,86,101,114,110,111,110,32,67,111,110,103,114,101,103,97,116,105,111,110,97,108,32,67,104,117,114,99,104,32,40,110,111,119,32,116,104,101,32,79,108,100,32,83,111,117,116,104,32,67,104,117,114,99,104,41,32,105,110,32,66,111,115,116,111,110,44,32,102,114,111,109,32,49,56,52,50,32,116,111,32,49,56,55,49,44,32,119,104,101,114,101,32,104,105,115,32,116,101,97,99,104,105,110,103,32,108,101,100,32,116,111,32,116,104,101,32,99,111,110,118,101,114,115,105,111,110,32,111,102,32,114,101,110,111,119,110,101,100,32,101,118,97,110,103,101,108,105,115,116,32,68,119,105,103,104,116,32,76,46,32,77,111,111,100,121,46,10,10,123,123,112,101,111,112,108,101,45,115,116,117,98,125,125,10,61,61,32,81,117,111,116,101,115,32,61,61,10,61,61,61,39,39,68,105,99,116,105,111,110,97,114,121,32,111,102,32,66,117,114,110,105,110,103,32,87,111,114,100,115,32,111,102,32,66,114,105,108,108,105,97,110,116,32,87,114,105,116,101,114,115,39,39,32,40,49,56,57,53,41,61,61,61,10,60,115,109,97,108,108,62,82,101,112,111,114,116,101,100,32,105,110,32,74,111,115,105,97,104,32,72,111,116,99,104,107,105,115,115,32,71,105,108,98,101,114,116,44,32,39,39,68,105,99,116,105,111,110,97,114,121,32,111,102,32,66,117,114,110,105,110,103,32,87,111,114,100,115,32,111,102,32,66,114,105,108,108,105,97,110,116,32,87,114,105,116,101,114,115,39,39,32,40,49,56,57,53,41,46,60,47,115,109,97,108,108,62,10,10,42,32,79,116,104,101,114,32,98,111,111,107,115,32,119,101,32,109,97,121,32,114,101,97,100,32,97,110,100,32,99,114,105,116,105,99,105,115,101,46,32,84,111,32,116,104,101,32,83,99,114,105,112,116,117,114,101,115,32,119,101,32,109,117,115,116,32,98,111,119,32,116,104,101,32,101,110,116,105,114,101,32,115,111,117,108,44,32,119,105,116,104,32,97,108,108,32,105,116,115,32,102,97,99,117,108,116,105,101,115,46,10,42,42,32,80,46,32,51,56,46,10,10,42,32,66,114,101,116,104,114,101,110,44,32,116,104,101,32,68,101,105,116,121,32,119,97,115,32,110,111,116,32,114,101,118,101,97,108,101,100,32,116,111,32,103,114,97,116,105,102,121,32,111,117,114,32,99,117,114,105,111,115,105,116,121,44,32,111,114,32,116,111,32,105,110,99,114,101,97,115,101,32,111,117,114,32,112,114,105,100,101,32,111,102,32,105,110,116,101,108,108,101,99,116,44,32,98,117,116,32,116,111,32,98,114,105,110,103,32,117,115,32,105,110,116,111,32,114,101,108,97,116,105,111,110,115,32,111,102,32,97,102,102,101,99,116,105,111,110,44,32,115,117,98,109,105,115,115,105,111,110,44,32,97,110,100,32,99,111,109,109,117,110,105,111,110,32,119,105,116,104,32,72,105,109,46,10,42,42,32,80,46,32,50,53,56,46,10,10,42,32,80,97,117,115,101,44,32,102,101,108,108,111,119,45,115,105,110,110,101,114,44,32,102,101,108,108,111,119,32,109,97,110,44,32,98,101,102,111,114,101,32,116,104,97,116,32,119,111,110,100,101,114,102,117,108,32,66,101,105,110,103,32,116,104,97,116,32,121,111,117,32,102,105,110,100,32,110,111,119,32,105,110,32,116,104,101,32,109,97,110,103,101,114,44,32,110,111,119,32,111,110,32,116,104,101,32,99,114,111,115,115,59,32,102,111,108,108,111,119,32,72,105,115,32,119,111,110,100,101,114,102,117,108,32,102,111,111,116,115,116,101,112,115,59,32,100,119,101,108,108,32,111,110,32,72,105,115,32,119,111,114,100,115,59,32,104,101,97,114,32,72,105,115,32,112,114,97,121,101,114,115,59,32,103,97,122,101,32,111,110,32,72,105,115,32,116,101,97,114,115,44,32,195,162,32,110,97,121,44,32,111,110,32,72,105,115,32,102,108,111,119,105,110,103,32,98,108,111,111,100,44,32,117,110,116,105,108,32,121,111,117,32,102,117,108,108,121,32,97,110,100,32,102,105,114,109,108,121,32,98,101,108,105,101,118,101,44,32,110,101,118,101,114,32,116,111,32,100,111,117,98,116,32,105,116,44,32,111,114,32,102,111,114,103,101,116,32,116,104,97,116,32,71,111,100,32,108,111,118,101,115,32,117,115,32,119,104,101,110,32,119,101,32,100,111,32,110,111,116,32,108,111,118,101,32,72,105,109,46,10,42,42,32,80,46,32,50,55,49,46,10,10,42,32,89,111,117,114,32,103,114,101,97,116,32,101,109,112,108,111,121,109,101,110,116,32,105,115,32,116,111,32,98,114,105,110,103,32,116,104,101,32,105,110,100,105,118,105,100,117,97,108,32,115,111,117,108,115,32,111,102,32,109,101,110,32,116,111,32,67,104,114,105,115,116,46,10,42,42,32,80,46,32,52,49,49,46,10,10,42,32,65,32,114,101,102,117,115,97,108,32,116,111,32,98,101,108,105,101,118,101,32,116,104,97,116,32,71,111,100,32,108,111,118,101,115,32,117,115,32,105,115,32,116,104,101,32,117,110,98,101,108,105,101,102,32,119,104,105,99,104,32,100,101,115,116,114,111,121,115,32,116,104,101,32,115,111,117,108,46,10,42,42,32,80,46,32,54,48,55,46,10,10,61,61,69,120,116,101,114,110,97,108,32,108,105,110,107,115,61,61,10,123,123,119,105,107,105,112,101,100,105,97,125,125,10,10,123,123,68,69,70,65,85,76,84,83,79,82,84,58,75,105,114,107,44,32,69,100,119,97,114,100,32,78,111,114,114,105,115,125,125,10,91,91,67,97,116,101,103,111,114,121,58,49,56,55,48,115,32,100,101,97,116,104,115,93,93,10,91,91,67,97,116,101,103,111,114,121,58,67,104,114,105,115,116,105,97,110,32,108,101,97,100,101,114,115,93,93,26,163,1,10,14,97,117,120,105,108,105,97,114,121,95,116,101,120,116,58,144,1,84,104,105,115,32,80,101,111,112,108,101,32,97,114,116,105,99,108,101,32,105,115,32,97,32,115,116,117,98,46,32,89,111,117,32,99,97,110,32,104,101,108,112,32,87,105,107,105,113,117,111,116,101,32,98,121,32,101,120,112,97,110,100,105,110,103,32,105,116,46,32,89,111,117,114,32,103,114,101,97,116,32,101,109,112,108,111,121,109,101,110,116,32,105,115,32,116,111,32,98,114,105,110,103,32,116,104,101,32,105,110,100,105,118,105,100,117,97,108,32,115,111,117,108,115,32,111,102,32,109,101,110,32,116,111,32,67,104,114,105,115,116,46,32,26,122,10,8,114,101,100,105,114,101,99,116,58,110,123,116,105,116,108,101,58,32,69,46,78,46,32,75,105,114,107,125,123,110,97,109,101,115,112,97,99,101,58,32,48,125,32,123,116,105,116,108,101,58,32,69,46,32,78,46,32,75,105,114,107,125,123,110,97,109,101,115,112,97,99,101,58,32,48,125,32,123,116,105,116,108,101,58,32,75,105,114,107,44,32,69,100,119,97,114,100,32,78,111,114,114,105,115,125,123,110,97,109,101,115,112,97,99,101,58,32,48,125,32,26,19,10,14,105,110,99,111,109,105,110,103,95,108,105,110,107,115,58,1,55,26,18,10,10,116,101,120,116,95,98,121,116,101,115,58,4,49,56,56,53,26,252,11,10,4,116,101,120,116,58,243,11,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,32,40,65,117,103,117,115,116,32,49,52,44,32,49,56,48,50,32,195,162,32,77,97,114,99,104,32,50,55,44,32,49,56,55,52,41,32,119,97,115,32,97,32,67,104,114,105,115,116,105,97,110,32,109,105,115,115,105,111,110,97,114,121,44,32,112,97,115,116,111,114,44,32,116,101,97,99,104,101,114,44,32,101,118,97,110,103,101,108,105,115,116,32,97,110,100,32,119,114,105,116,101,114,32,105,110,32,116,104,101,32,80,114,101,115,98,121,116,101,114,105,97,110,44,32,67,111,110,103,114,101,103,97,116,105,111,110,97,108,32,97,110,100,32,114,101,118,105,118,97,108,105,115,116,32,116,114,97,100,105,116,105,111,110,115,32,105,110,32,116,104,101,32,85,83,65,46,32,72,101,32,102,111,117,110,100,101,100,32,116,104,101,32,70,111,117,114,116,104,32,80,114,101,115,98,121,116,101,114,105,97,110,32,67,104,117,114,99,104,44,32,65,108,98,97,110,121,44,32,78,101,119,32,89,111,114,107,44,32,102,111,108,108,111,119,105,110,103,32,97,32,115,99,104,105,115,109,32,97,116,32,116,104,101,32,83,101,99,111,110,100,32,80,114,101,115,98,121,116,101,114,105,97,110,32,67,104,117,114,99,104,32,105,110,32,116,104,101,32,115,97,109,101,32,99,105,116,121,44,32,97,110,100,32,108,97,116,101,114,32,115,101,114,118,101,100,32,97,115,32,116,104,101,32,102,105,114,115,116,32,112,97,115,116,111,114,32,111,102,32,77,111,117,110,116,32,86,101,114,110,111,110,32,67,111,110,103,114,101,103,97,116,105,111,110,97,108,32,67,104,117,114,99,104,32,40,110,111,119,32,116,104,101,32,79,108,100,32,83,111,117,116,104,32,67,104,117,114,99,104,41,32,105,110,32,66,111,115,116,111,110,44,32,102,114,111,109,32,49,56,52,50,32,116,111,32,49,56,55,49,44,32,119,104,101,114,101,32,104,105,115,32,116,101,97,99,104,105,110,103,32,108,101,100,32,116,111,32,116,104,101,32,99,111,110,118,101,114,115,105,111,110,32,111,102,32,114,101,110,111,119,110,101,100,32,101,118,97,110,103,101,108,105,115,116,32,68,119,105,103,104,116,32,76,46,32,77,111,111,100,121,46,32,32,32,82,101,112,111,114,116,101,100,32,105,110,32,74,111,115,105,97,104,32,72,111,116,99,104,107,105,115,115,32,71,105,108,98,101,114,116,44,32,68,105,99,116,105,111,110,97,114,121,32,111,102,32,66,117,114,110,105,110,103,32,87,111,114,100,115,32,111,102,32,66,114,105,108,108,105,97,110,116,32,87,114,105,116,101,114,115,32,40,49,56,57,53,41,46,32,79,116,104,101,114,32,98,111,111,107,115,32,119,101,32,109,97,121,32,114,101,97,100,32,97,110,100,32,99,114,105,116,105,99,105,115,101,46,32,84,111,32,116,104,101,32,83,99,114,105,112,116,117,114,101,115,32,119,101,32,109,117,115,116,32,98,111,119,32,116,104,101,32,101,110,116,105,114,101,32,115,111,117,108,44,32,119,105,116,104,32,97,108,108,32,105,116,115,32,102,97,99,117,108,116,105,101,115,46,32,80,46,32,51,56,46,32,32,66,114,101,116,104,114,101,110,44,32,116,104,101,32,68,101,105,116,121,32,119,97,115,32,110,111,116,32,114,101,118,101,97,108,101,100,32,116,111,32,103,114,97,116,105,102,121,32,111,117,114,32,99,117,114,105,111,115,105,116,121,44,32,111,114,32,116,111,32,105,110,99,114,101,97,115,101,32,111,117,114,32,112,114,105,100,101,32,111,102,32,105,110,116,101,108,108,101,99,116,44,32,98,117,116,32,116,111,32,98,114,105,110,103,32,117,115,32,105,110,116,111,32,114,101,108,97,116,105,111,110,115,32,111,102,32,97,102,102,101,99,116,105,111,110,44,32,115,117,98,109,105,115,115,105,111,110,44,32,97,110,100,32,99,111,109,109,117,110,105,111,110,32,119,105,116,104,32,72,105,109,46,32,80,46,32,50,53,56,46,32,32,80,97,117,115,101,44,32,102,101,108,108,111,119,45,115,105,110,110,101,114,44,32,102,101,108,108,111,119,32,109,97,110,44,32,98,101,102,111,114,101,32,116,104,97,116,32,119,111,110,100,101,114,102,117,108,32,66,101,105,110,103,32,116,104,97,116,32,121,111,117,32,102,105,110,100,32,110,111,119,32,105,110,32,116,104,101,32,109,97,110,103,101,114,44,32,110,111,119,32,111,110,32,116,104,101,32,99,114,111,115,115,59,32,102,111,108,108,111,119,32,72,105,115,32,119,111,110,100,101,114,102,117,108,32,102,111,111,116,115,116,101,112,115,59,32,100,119,101,108,108,32,111,110,32,72,105,115,32,119,111,114,100,115,59,32,104,101,97,114,32,72,105,115,32,112,114,97,121,101,114,115,59,32,103,97,122,101,32,111,110,32,72,105,115,32,116,101,97,114,115,44,32,195,162,32,110,97,121,44,32,111,110,32,72,105,115,32,102,108,111,119,105,110,103,32,98,108,111,111,100,44,32,117,110,116,105,108,32,121,111,117,32,102,117,108,108,121,32,97,110,100,32,102,105,114,109,108,121,32,98,101,108,105,101,118,101,44,32,110,101,118,101,114,32,116,111,32,100,111,117,98,116,32,105,116,44,32,111,114,32,102,111,114,103,101,116,32,116,104,97,116,32,71,111,100,32,108,111,118,101,115,32,117,115,32,119,104,101,110,32,119,101,32,100,111,32,110,111,116,32,108,111,118,101,32,72,105,109,46,32,80,46,32,50,55,49,46,32,32,89,111,117,114,32,103,114,101,97,116,32,101,109,112,108,111,121,109,101,110,116,32,105,115,32,116,111,32,98,114,105,110,103,32,116,104,101,32,105,110,100,105,118,105,100,117,97,108,32,115,111,117,108,115,32,111,102,32,109,101,110,32,116,111,32,67,104,114,105,115,116,46,32,80,46,32,52,49,49,46,32,32,65,32,114,101,102,117,115,97,108,32,116,111,32,98,101,108,105,101,118,101,32,116,104,97,116,32,71,111,100,32,108,111,118,101,115,32,117,115,32,105,115,32,116,104,101,32,117,110,98,101,108,105,101,102,32,119,104,105,99,104,32,100,101,115,116,114,111,121,115,32,116,104,101,32,115,111,117,108,46,32,80,46,32,54,48,55,46,32,32,32,32,32,32,32,87,105,107,105,112,101,100,105,97,32,104,97,115,32,97,110,32,97,114,116,105,99,108,101,32,97,98,111,117,116,58,32,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,26,90,10,8,116,101,109,112,108,97,116,101,58,78,84,101,109,112,108,97,116,101,58,80,101,111,112,108,101,45,115,116,117,98,32,84,101,109,112,108,97,116,101,58,65,115,98,111,120,32,84,101,109,112,108,97,116,101,58,87,105,107,105,112,101,100,105,97,32,84,101,109,112,108,97,116,101,58,83,105,115,116,101,114,112,114,111,106,101,99,116,32,26,65,10,13,111,117,116,103,111,105,110,103,95,108,105,110,107,58,48,76,105,115,116,95,111,102,95,112,101,111,112,108,101,95,98,121,95,110,97,109,101,32,87,105,107,105,112,101,100,105,97,32,87,105,107,105,113,117,111,116,101,58,83,116,117,98,32,26,74,10,7,104,101,97,100,105,110,103,58,63,81,117,111,116,101,115,32,68,105,99,116,105,111,110,97,114,121,32,111,102,32,66,117,114,110,105,110,103,32,87,111,114,100,115,32,111,102,32,66,114,105,108,108,105,97,110,116,32,87,114,105,116,101,114,115,32,40,49,56,57,53,41,32,26,17,10,13,101,120,116,101,114,110,97,108,95,108,105,110,107,58,0,26,56,10,8,99,97,116,101,103,111,114,121,58,44,80,101,111,112,108,101,32,115,116,117,98,115,32,49,56,55,48,115,32,100,101,97,116,104,115,32,67,104,114,105,115,116,105,97,110,32,108,101,97,100,101,114,115,32,26,33,10,9,116,105,109,101,115,116,97,109,112,58,20,50,48,49,55,45,48,51,45,48,57,84,50,51,58,53,54,58,51,49,90,26,27,10,5,116,105,116,108,101,58,18,69,100,119,97,114,100,32,78,111,114,114,105,115,32,75,105,114,107,26,18,10,14,110,97,109,101,115,112,97,99,101,95,116,101,120,116,58,0,26,14,10,9,110,97,109,101,115,112,97,99,101,58,1,48>>,
    PDU = apollo_pb:decode_msg(Bin, 'ApolloPdu'),
    PDU = apollo_epb:decode_msg(Bin, 'ApolloPdu'),
    io:format("~p,",[PDU]),
    Bin2 = apollo_pb:encode_msg(PDU),
    Bin2 = apollo_epb:encode_msg(PDU),
    Bin == Bin2.
